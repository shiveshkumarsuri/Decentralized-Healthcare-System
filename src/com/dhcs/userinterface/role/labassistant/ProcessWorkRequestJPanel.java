package com.dhcs.userinterface.role.labassistant;

import com.dhcs.business.organization.LabOrganization;
import com.dhcs.business.workqueue.LabTestWorkRequest;
import com.dhcs.business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.awt.print.PrinterException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import org.apache.log4j.Logger;

/**
 *
 * @author shivesh
 */
public class ProcessWorkRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    private LabOrganization labOrganization;
    LabTestWorkRequest request;
    private static final Logger logger = Logger.getLogger(ProcessWorkRequestJPanel.class);
    private  File f;
    boolean flag;
    /**
     * Creates new form ProcessWorkRequestJPanel
     */
    public ProcessWorkRequestJPanel(JPanel userProcessContainer, LabOrganization labOrganization, LabTestWorkRequest request) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.labOrganization = (LabOrganization)labOrganization;
        this.request = request;
        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font(  
          "Bookman Old Style", Font.BOLD, 18)));
         printJButton.setEnabled(false);
        //method to auto populate checkboxes
        popCheck();
    }
    
    private void popCheck() {
      
        //Populate check box a/c to arraylist of boolean coming in work request and writ result beside every test and then save it to text file
        for(WorkRequest request : labOrganization.getWorkQueue().getWorkRequestList()){
           LabTestWorkRequest rq = (LabTestWorkRequest)request;
           rbcCheckBox.setSelected(rq.getBooleanMap().get(rbcCheckBox.getText()));
           glCheckBox.setSelected(rq.getBooleanMap().get(glCheckBox.getText()));
           triCheckBox.setSelected(rq.getBooleanMap().get(triCheckBox.getText()));
           proCheckBox.setSelected(rq.getBooleanMap().get(proCheckBox.getText()));
           choCheckBox.setSelected(rq.getBooleanMap().get(choCheckBox.getText()));
           sugarCheckBox.setSelected(rq.getBooleanMap().get(sugarCheckBox.getText()));
           diaCheckBox.setSelected(rq.getBooleanMap().get(diaCheckBox.getText()));
           nauCheckBox.setSelected(rq.getBooleanMap().get(nauCheckBox.getText()));
           fatCheckBox.setSelected(rq.getBooleanMap().get(fatCheckBox.getText()));
        }
        if(rbcCheckBox.isSelected())
            jTextField1.setEnabled(true);
        if(glCheckBox.isSelected())
            jTextField2.setEnabled(true);
        if(triCheckBox.isSelected())
            jTextField3.setEnabled(true);
        if(proCheckBox.isSelected())
            jTextField4.setEnabled(true);
        if(choCheckBox.isSelected())
            jTextField5.setEnabled(true);
        if(sugarCheckBox.isSelected())
            jTextField6.setEnabled(true);
        if(diaCheckBox.isSelected())
            jTextField7.setEnabled(true);
        if(nauCheckBox.isSelected())
            jTextField8.setEnabled(true);
        if(fatCheckBox.isSelected())
            jTextField9.setEnabled(true);  
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        resultJTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rbcCheckBox = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        glCheckBox = new javax.swing.JCheckBox();
        jTextField2 = new javax.swing.JTextField();
        triCheckBox = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        proCheckBox = new javax.swing.JCheckBox();
        jTextField4 = new javax.swing.JTextField();
        choCheckBox = new javax.swing.JCheckBox();
        jTextField5 = new javax.swing.JTextField();
        sugarCheckBox = new javax.swing.JCheckBox();
        jTextField6 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        diaCheckBox = new javax.swing.JCheckBox();
        jTextField7 = new javax.swing.JTextField();
        nauCheckBox = new javax.swing.JCheckBox();
        jTextField8 = new javax.swing.JTextField();
        fatCheckBox = new javax.swing.JCheckBox();
        jTextField9 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        printJButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1700, 1000));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        submitJButton.setBackground(new java.awt.Color(0, 153, 51));
        submitJButton.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        submitJButton.setText("Submit Report");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 600, 300, 60));

        jLabel1.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Report Status");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, -1, 50));

        resultJTextField.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        resultJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        add(resultJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 250, 50));

        backJButton.setBackground(new java.awt.Color(0, 153, 153));
        backJButton.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 790, 300, 60));

        jLabel2.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jLabel2.setText("Blood");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, 80, 40));

        rbcCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        rbcCheckBox.setText("RBC");
        rbcCheckBox.setEnabled(false);
        add(rbcCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 120, 35));

        jTextField1.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 390, 200, 35));

        glCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        glCheckBox.setText("Glucose");
        glCheckBox.setEnabled(false);
        add(glCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 390, 140, 35));

        jTextField2.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField2.setEnabled(false);
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 200, 35));

        triCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        triCheckBox.setText("Triglycerides");
        triCheckBox.setEnabled(false);
        add(triCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 390, -1, 35));

        jTextField3.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField3.setEnabled(false);
        add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 390, 200, 35));

        jLabel3.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jLabel3.setText("Urine");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 80, 40));

        proCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        proCheckBox.setText("Protein");
        proCheckBox.setEnabled(false);
        add(proCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 440, 120, 35));

        jTextField4.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField4.setEnabled(false);
        add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 450, 200, 35));

        choCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        choCheckBox.setText("Cholesterol");
        choCheckBox.setEnabled(false);
        add(choCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 450, 140, 35));

        jTextField5.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField5.setEnabled(false);
        add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 450, 200, 35));

        sugarCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        sugarCheckBox.setText("Sugar");
        sugarCheckBox.setEnabled(false);
        add(sugarCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 440, 150, 35));

        jTextField6.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField6.setEnabled(false);
        add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 440, 200, 35));

        jLabel4.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jLabel4.setText("Stool");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 490, 80, 40));

        diaCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        diaCheckBox.setText("Diarrhoea");
        diaCheckBox.setEnabled(false);
        add(diaCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 500, -1, 35));

        jTextField7.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField7.setEnabled(false);
        add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 500, 200, 35));

        nauCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        nauCheckBox.setText("Nausea");
        nauCheckBox.setEnabled(false);
        add(nauCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 500, 140, 35));

        jTextField8.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField8.setEnabled(false);
        add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 500, 200, 35));

        fatCheckBox.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 16)); // NOI18N
        fatCheckBox.setText("Fatigue");
        fatCheckBox.setEnabled(false);
        add(fatCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 500, 150, 35));

        jTextField9.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jTextField9.setEnabled(false);
        add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 500, 200, 35));

        jLabel5.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 0, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Lab Report");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 570, 100));

        printJButton.setBackground(new java.awt.Color(0, 153, 51));
        printJButton.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        printJButton.setText("Print Report");
        printJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        printJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJButtonActionPerformed(evt);
            }
        });
        add(printJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 780, 300, 60));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dhcs/util/image/lab-report.jpg"))); // NOI18N
        jLabel7.setText("jLabel7");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1700, 1000));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        LabAssistantWorkAreaJPanel dwjp = (LabAssistantWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
       
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        String report = resultJTextField.getText();
        flag = true;
        if(!report.trim().isEmpty()) {
            request.setTestResult(resultJTextField.getText());
            request.setStatus("Completed");
            f = new File("d:\\report.txt");
            try {
                f.createNewFile();
                FileWriter writer = new FileWriter(f);
                BufferedWriter bw = new BufferedWriter(writer);

                writer.write("===================================== LAB REPORT ===================================================");
                writer.write("\r\n");
                writer.write("\r\n");
                writer.write("-----------------------------Decentralized HealthCare System----------------------------------------");
                writer.write("\r\n");
                writer.write("\r\n");
                writer.write("\t \t \t \t \t \t \t \t \t \t \t");
                Date date = new Date();
                writer.write(date.toString());
                writer.write("\r\n");
                writer.write("\t \t \t \t \t \t \t \t \t \t \t");
                writer.write("Phone : (414)227-4731");
                writer.write("\r\n");
                writer.write("\t \t \t \t \t \t \t \t \t \t \t");
                writer.write("Fax : (414)227-4284");
                writer.write("\r\n");
                writer.write("\t \t \t \t \t \t \t \t \t \t \t");
                writer.write("www.dhcs.org");
                writer.write("\r\n");
                writer.write("\r\n");
                writer.write("This Medical Report has been produced for use by its clients as a convenient reference in an effort to eliminate the cost of records review.");
                writer.write("\r\n");
                writer.write("It is intended to be used for reference only, and should be utilized for all medical and legal purposes.");
                writer.write("\r\n");
                writer.write("We shall not be responsible for any errors, omissions, or other inaccuracies in this review.");
                writer.write("\r\n");
                writer.write("RESULT : "+resultJTextField.getText());
                writer.write("\r\n");
                writer.write("\r\n");
                if(rbcCheckBox.isSelected()) {
                    if(!(jTextField1.getText().trim().isEmpty())) {
                        writer.write("RBC : "+jTextField1.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(glCheckBox.isSelected()) {
                    if(!(jTextField2.getText().trim().isEmpty())) {
                        writer.write("GLUCOSE : "+jTextField2.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {   
                        flag = false;
                    }
                }
                if(triCheckBox.isSelected()) {
                    if(!(jTextField3.getText().trim().isEmpty())) {
                        writer.write("TRIGLYCERIDES : "+jTextField3.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(proCheckBox.isSelected()) {
                    if(!(jTextField4.getText().trim().isEmpty())) {
                        writer.write("PROTEIN : "+jTextField4.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }    
                }
                if(choCheckBox.isSelected()) {
                    if(!(jTextField5.getText().trim().isEmpty())) {
                        writer.write("CHOLESTEROL : "+jTextField5.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(sugarCheckBox.isSelected()) {
                    if(!(jTextField6.getText().trim().isEmpty())) {
                        writer.write("SUGAR : "+jTextField6.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(diaCheckBox.isSelected()) {
                    if(!(jTextField7.getText().trim().isEmpty())) {
                        writer.write("DIARRHOEA : "+jTextField7.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(nauCheckBox.isSelected()) {
                    if(!(jTextField8.getText().trim().isEmpty())) {
                        writer.write("NAUSEA : "+jTextField8.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                if(fatCheckBox.isSelected()) {
                    if(!(jTextField8.getText().trim().isEmpty())) {
                        writer.write("FATIGUE : "+jTextField9.getText());
                        writer.write("\r\n");
                        writer.write("\r\n");
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
                writer.write("\r\n");
                writer.write("References : Available upon request");
                writer.write("\r\n");
                writer.write("\r\n");
                writer.write("This report depends upon"); 
                writer.write("\r\n");
                writer.write("1. Correct Identification of all the samples");
                writer.write("\r\n");
                writer.write("2. All biological relationaships being correctly presented");
                writer.write("\r\n");
                writer.write("3. Accurate diagnosis of the affected individual");

                writer.close();
                if(flag) {
                    JOptionPane.showMessageDialog(this, "Request processed successfully ",
                    "Decentralised Health Care System",JOptionPane.INFORMATION_MESSAGE);
                    printJButton.setEnabled(true);
                    submitJButton.setEnabled(false);
                    resultJTextField.setText("");
                    jTextField1.setText("");
                    jTextField2.setText("");
                    jTextField3.setText("");
                    jTextField4.setText("");
                    jTextField5.setText("");
                    jTextField6.setText("");
                    jTextField7.setText("");
                    jTextField8.setText("");
                    jTextField9.setText("");
                    jTextField1.setEnabled(false);
                    jTextField2.setEnabled(false);
                    jTextField3.setEnabled(false);
                    jTextField4.setEnabled(false);
                    jTextField5.setEnabled(false);
                    jTextField6.setEnabled(false);
                    jTextField7.setEnabled(false);
                    jTextField8.setEnabled(false);
                    jTextField9.setEnabled(false);  
                    rbcCheckBox.setSelected(false);
                    glCheckBox.setSelected(false);
                    triCheckBox.setSelected(false);
                    proCheckBox.setSelected(false);
                    choCheckBox.setSelected(false);
                    sugarCheckBox.setSelected(false);
                    diaCheckBox.setSelected(false);
                    nauCheckBox.setSelected(false);
                    fatCheckBox.setSelected(false);
                    rbcCheckBox.setEnabled(false);
                    glCheckBox.setEnabled(false);
                    triCheckBox.setEnabled(false);
                    proCheckBox.setEnabled(false);
                    choCheckBox.setEnabled(false);
                    sugarCheckBox.setEnabled(false);
                    diaCheckBox.setEnabled(false);
                    nauCheckBox.setEnabled(false);
                    fatCheckBox.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter a proper report for each test",
                        "Decentralised Health Care System",JOptionPane.WARNING_MESSAGE); 
                }

            } catch (Exception e) {
              System.err.println(e.getMessage());
              logger.error("Exeption Occured during lab report creation ", e);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please pass a valid report status to doctor",
                    "Decentralised Health Care System",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJButtonActionPerformed
        JEditorPane fileToPrint = null;
        try {
            fileToPrint = new JEditorPane("file:///D://report.txt");
        } catch (IOException ex) {
            logger.error("Exception occured during file read operation", ex);
        }
        try {
            fileToPrint.print(null, null, true, null, null, false);
        } catch (PrinterException ex) {
            logger.error("Exception occured during file print operation", ex);
        }
    }//GEN-LAST:event_printJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JCheckBox choCheckBox;
    private javax.swing.JCheckBox diaCheckBox;
    private javax.swing.JCheckBox fatCheckBox;
    private javax.swing.JCheckBox glCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JCheckBox nauCheckBox;
    private javax.swing.JButton printJButton;
    private javax.swing.JCheckBox proCheckBox;
    private javax.swing.JCheckBox rbcCheckBox;
    private javax.swing.JTextField resultJTextField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JCheckBox sugarCheckBox;
    private javax.swing.JCheckBox triCheckBox;
    // End of variables declaration//GEN-END:variables
}
